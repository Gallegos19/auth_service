pipeline {
    agent any

    tools {
        nodejs 'NodeJS'
    }

    environment {
        EC2_USER = 'ubuntu'  
        SSH_KEY = credentials('ssh-key-ec2')
        DEV_IP = '35.173.210.139'
        QA_IP  = '34.199.159.255'
        PROD_IP = '18.235.91.203'
        REMOTE_PATH = '/home/ubuntu/auth_service'
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Detect Branch') {
            steps {
                script {
                    env.ACTUAL_BRANCH = scm.branches[0].name.split('/')[-1]
                    echo "üîç Rama activa: ${env.ACTUAL_BRANCH}"
                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    def ip = env.ACTUAL_BRANCH == 'dev' ? DEV_IP :
                             env.ACTUAL_BRANCH == 'qa'  ? QA_IP :
                             env.ACTUAL_BRANCH == 'main' ? PROD_IP : null

                    def pm2_name = "${env.ACTUAL_BRANCH}-health"

                    if (ip == null) {
                        error "Branch ${env.ACTUAL_BRANCH} no est√° configurada para despliegue."
                    }

                    sh """
                    ssh -i $SSH_KEY -o StrictHostKeyChecking=no $EC2_USER@$ip '
                        echo "üì¶ Actualizando sistema..."
                        sudo apt-get update -y
                        
                        echo "üì• Verificando Node.js..."
                        if ! command -v node > /dev/null; then
                            curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
                            sudo apt-get install -y nodejs
                        fi

                        echo "üì• Verificando PM2..."
                        if ! command -v pm2 > /dev/null; then
                            sudo npm install -g pm2
                        fi

                        echo "üìÅ Configurando repositorio..."
                        if [ ! -d "$REMOTE_PATH/.git" ]; then
                            git clone -b ${env.ACTUAL_BRANCH} https://github.com/Gallegos19/auth_service.git $REMOTE_PATH
                        fi

                        echo "üîÅ Actualizando c√≥digo..."
                        cd $REMOTE_PATH
                        git fetch origin
                        git reset --hard origin/${env.ACTUAL_BRANCH}
                        git clean -fd
                        
                        echo "üöÄ Instalando dependencias..."
                        npm ci
                        
                        echo "‚öôÔ∏è Configurando aplicaci√≥n..."
                        pm2 delete ${pm2_name} || true
                        npm run build
                        pm2 start npm --name ${pm2_name} -- start
                        pm2 save
                        
                        # Configurar startup solo una vez
                        if [ ! -f "/etc/systemd/system/pm2-${EC2_USER}.service" ]; then
                            pm2 startup
                        fi
                    '
                    """
                }
            }
        }

        stage('Verify Deployment') {
            steps {
                script {
                    sh """
                    ssh -i $SSH_KEY -o StrictHostKeyChecking=no $EC2_USER@$ip '
                        echo "üîÑ Verificando estado del servicio..."
                        sleep 5  # Esperar que el servicio inicie
                        pm2 list
                        curl -I http://localhost:3001/health || echo "Servicio no responde"
                    '
                    """
                }
            }
        }
    }

    post {
        always {
            echo "‚úÖ Pipeline completado"
        }
        failure {
            echo "‚ùå Pipeline fall√≥"
        }
    }
}